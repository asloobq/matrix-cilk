#include <cilk-lib.cilkh>
#include <stdlib.h>
#include <stdio.h>

#define DEBUG 0

#if !defined(DEBUG) || DEBUG == 0
#define LOG(...) do {} while(0);

#elif DEBUG == 1
#define LOG(format, ...) printf(format, ##__VA_ARGS__)
#endif

/*
   TODO List
   -format output according to word file
   -remove warnings
   -do writeup
   -remove this todo list (duh!)
 */

enum FillType {NEGATIVE_ONE, RANDOM};



/*
   Part of matrix multiplication. Perfroms multiplcation for 'n' rows in the result matrix,
   where n = endRow - startRow
 */
cilk void matMultPartRow(const int **A, const int **B, int **C, const int size, const int startRow, const int endRow) {
	int i, j, k;
	for(i = startRow ; i <= endRow ; i++)
		for(j = 0; j < size; j++) {
			C[i][j] = 0;
			for(k = 0; k < size; k++) {
				C[i][j] += (A[i][k] * B[k][j]);
			}
		}
}

/*
   Matrix multiplication Static Splitter.
   Splits the resultant matrix into 'splits' number of pieces in row order
   (i.e. 'x' number of rows in each split)
   Calculates the 'starting row' and 'ending row' for each split
   and spawns a new thread for each piece.
 */
cilk void matMultStaticSplit(const int **A, const int **B, int **C, const int size, int splits) {
	/*
	   Assuming both are square matrices of same size.
	 */
	int remainder, splitSize;
	int i;
	int startRow, endRow;
	LOG("matMultStaticSplit\n");
	/*
	   Size has to be Greater than number of splits.
	 */
	if( size < splits) {
		/* set both same */
		splits = size;
	}
	remainder = (size % splits);/* will be added to last spawn is non-zero*/
	splitSize = size / splits;
	startRow = 0;
	endRow = startRow + splitSize - 1;
	for(i = 1; i <= (splits-1); i++) {
		LOG("matMultStaticSplit startRow = %d, endRow = %d\n", startRow, endRow);
		spawn matMultPartRow(A, B, C, size, startRow, endRow);

		startRow += splitSize;
		endRow = startRow + splitSize - 1;
	}

	/* Handle last iteration separately */
	spawn matMultPartRow(A, B, C, size, startRow, endRow + remainder);
	sync;
}

/*
   Prints a square matrix of size 'size'
 */
void printMat(const int **mat, const int size) {
	int i, j;
	printf("\n");
	for(i = 0; i < size; i++) {
		for(j =0; j < size; j++) {
			printf("ary[%d][%d] = %d ", i, j, mat[i][j]);
		}
		printf("\n");
	}
	printf("\n");
}

/*
   Initializes a matrix with some initial values.
   Initial value depends on enum type -
Random : fills with random numbers.
Negative_one : fills with -1
 */
cilk void initializeMat(int **mat, const int size, int fillType) {
	int i, j, seed;
	//seed = size;
	LOG("initialize mat\n");
	LOG("Initialize mat size = %d\n", size);
	for(i = 0; i < size; i++) {
		LOG("initialize mat i = %d \n", i);
		for(j = 0; j < size; j++) {
			LOG("initialize mat j = %d : %d\n", j, size);
			if(fillType == RANDOM) {
				mat[i][j] = (rand_r(&seed)%10000);
				//mat[i][j] = 2;
				seed = mat[i][j];
			} else {
				mat[i][j] = -1;
			}
		}
	}
}

/*
   Initialises all three matrices with some initial values.
 */
cilk void initializeMats(int **A, int **B, int **C, const int size) {
	/*
	   a. Load arrays A, B with positive random integers of any range
	   b. Load result array C with -1
	   c. The loading of A, B, and C must be performed in parallel.
	 */
	LOG("InitializeMats size : %d\n", size);
	spawn initializeMat(A, size, RANDOM);
	spawn initializeMat(B, size, RANDOM);
	spawn initializeMat(C, size, NEGATIVE_ONE);
	sync;
}

/*
   Allocates memory for a square matrix based on its size.
   @return pointer to the matrix.
 */
cilk int** createMat(int **mat, const int size) {
	int i;
	if((mat = (int**) malloc(size * sizeof(int*))) == NULL) {
		printf("Malloc error\n");
	}
	LOG("\n createMat \n");
	for(i = 0; i < size; i++) {
		if ((mat[i] = (int *)malloc(size * sizeof(int))) == NULL) {
			printf(" malloc error\n");
		}
		LOG("createmat %d \n", i);
	}
	LOG("creating mat\n");
	/*//Simpler way of malloc?
	  mat = malloc(sizeof(sizeof(int) * size * size));
	  if(mat == NULL) {
	  printf("malloc error \n");
	  }*/
	return mat;
}

/*
   Releases memory allocated by the three matrices.
 */
void matRelease(int **A, int **B, int **C) {
	free(A);
	free(B);
	free(C);
}

/*
   Perform all steps in Matrix Addition without
   Recursive Divide and Conquer.
 */
cilk void matAddStatic(const int workers, const int splits, const int size) {

	int **A, **B, **C;
	LOG("matAddStatic\n");
	/*
	   a. Initialize all matrices i.e. allocate memory space for matrices A, B, C
	   b. Perform initializing concurrently i.e. parallel using Cilk constructs
	 */
	//A
	LOG("Create Matrix A \n");
	A = spawn createMat(A, size);
	//B
	LOG("Create Matrix B \n");
	B = spawn createMat(B, size);
	//C
	LOG("Create Matrix C \n");
	C = spawn createMat(C, size);
	sync;

	spawn initializeMats(A, B, C, size);
	sync;
	LOG("init finish\n");


	printf("Matrix A loaded with random numbers:\n");
	printMat(A, size);
	printf("Matrix B loaded with random numbers:\n");
	printMat(B, size);
	printf("Matrix C loaded with -1's:\n");
	printMat(C, size);
	LOG("Matrix Split Add \n");


	spawn matMultStaticSplit(A, B, C, size, splits);
	sync;
	
	printf("Matrix C holds result after A[]*B[]:\n");
	printMat(C, size);
	LOG("Releasing matrices \n");
	matRelease(A, B, C);
}

cilk int main(int argc, char *argv[]) {
	/* parse arguments */
	/* example ./madd --nproc 2 5 500
	   workers = 2
	   splits = 5
	   size = 500
	 */
	int workers, splits, size;
	Cilk_time tm_begin, tm_elapsed;
	Cilk_time wk_begin, wk_elapsed;
	Cilk_time cp_begin, cp_elapsed;	

	/* parse using atoi*/
	if(argc == 3) {
		workers = atoi(argv[0]);
		splits = atoi(argv[1]);
		size = atoi(argv[2]);

		// Start Timing
		cp_begin = Cilk_user_critical_path;
		wk_begin = Cilk_user_work;
		tm_begin = Cilk_get_wall_time();

		spawn matAddStatic(workers, splits, size);
		sync;

		//Stop Timing
		tm_elapsed = Cilk_get_wall_time() - tm_begin;
		wk_elapsed = Cilk_user_work - wk_begin;
		cp_elapsed = Cilk_user_critical_path - cp_begin;

		printf("Running time = %4f s\n", Cilk_wall_time_to_sec(tm_elapsed));
		printf("Work = %4f s\n", Cilk_time_to_sec(wk_elapsed));
		printf("Span = %4f s\n\n", Cilk_time_to_sec(cp_elapsed));

		LOG("Hello World workers = %d, splits = %d, size = %d\n",
				workers, splits, size);
	} else {
		printf("usage --nproc <workers> <splits> <size>\n");
		return 0;
	}
	return 0;
}
